---

- name: Find out if PostgreSQL is initialized
  ansible.builtin.stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: __postgres_data

- name: Initialize postgresql
  ansible.builtin.command:
    # cmd: postgresql-setup --initdb
    cmd: "{{ postgresql_bin_dir }}/initdb -D {{ postgresql_data_dir }}"
  changed_when: yes
  become: yes
  become_user: "{{ postgresql_user }}"
  when: not __postgres_data.stat.exists

- name: Start service
  ansible.builtin.service:
    name: "{{ postgresql_service }}"
    state: started
    enabled: yes

- name: Configure postgresql settings (postgresql.conf)
  ansible.builtin.replace:
    path: "{{ postgresql_etc_dir }}/postgresql.conf"
    regexp: "^(#)?{{ item.key }}.*"
    replace: "{{ item.key }} = '{{ item.value }}'"
    backup: yes
  loop: "{{ postgresql_settings | dict2items }}"
  notify: Restart postgresql

- name: Allow remote connections (pg_hba.conf)
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_etc_dir }}/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "0600"
    backup: yes
  notify: Restart postgresql

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
